{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false\r\n  }\r\n})\r\n\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,4OAAY,EAAC,aAAa,iBAAiB;IACjE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;QAChB,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/store/authStore.ts"],"sourcesContent":["import { create } from 'zustand'\r\nimport { persist } from 'zustand/middleware'\r\nimport { UserProfile } from '@/types/database'\r\nimport { supabase } from '@/lib/supabase'\r\n\r\ninterface AuthState {\r\n  user: UserProfile | null\r\n  isAuthenticated: boolean\r\n  isLoading: boolean\r\n  error: string | null\r\n  \r\n  // Actions\r\n  setUser: (user: UserProfile | null) => void\r\n  setLoading: (isLoading: boolean) => void\r\n  setError: (error: string | null) => void\r\n  logout: () => Promise<void>\r\n  initialize: () => Promise<void>\r\n  updateProfile: (updates: Partial<UserProfile>) => void\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      error: null,\r\n\r\n      setUser: (user) => set({ \r\n        user, \r\n        isAuthenticated: !!user,\r\n        error: null \r\n      }),\r\n\r\n      setLoading: (isLoading) => set({ isLoading }),\r\n\r\n      setError: (error) => set({ error }),\r\n\r\n      logout: async () => {\r\n        try {\r\n          // Supabase 로그아웃\r\n          await supabase.auth.signOut()\r\n          \r\n          // 상태 초기화\r\n          set({\r\n            user: null,\r\n            isAuthenticated: false,\r\n            error: null\r\n          })\r\n        } catch (error) {\r\n          console.error('로그아웃 실패:', error)\r\n          set({ error: '로그아웃에 실패했습니다.' })\r\n        }\r\n      },\r\n\r\n      initialize: async () => {\r\n        set({ isLoading: true })\r\n        \r\n        try {\r\n          // Supabase 세션 확인\r\n          const { data: { session } } = await supabase.auth.getSession()\r\n          \r\n          if (session?.user) {\r\n            // 사용자 프로필 가져오기\r\n            const { data: profile, error } = await supabase\r\n              .from('user_profiles')\r\n              .select('*')\r\n              .eq('id', session.user.id)\r\n              .single()\r\n\r\n            if (error) {\r\n              console.error('프로필 로드 실패:', error)\r\n              set({ isAuthenticated: false, user: null })\r\n            } else {\r\n              set({ user: profile, isAuthenticated: true })\r\n            }\r\n          } else {\r\n            set({ isAuthenticated: false, user: null })\r\n          }\r\n        } catch (error) {\r\n          console.error('인증 상태 초기화 실패:', error)\r\n          set({ isAuthenticated: false, user: null })\r\n        } finally {\r\n          set({ isLoading: false })\r\n        }\r\n      },\r\n\r\n      updateProfile: (updates) => {\r\n        const currentUser = get().user\r\n        if (currentUser) {\r\n          set({\r\n            user: {\r\n              ...currentUser,\r\n              ...updates\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      partialize: (state) => ({\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated\r\n      })\r\n    }\r\n  )\r\n)\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;;;;AAiBO,MAAM,eAAe,IAAA,uLAAM,IAChC,IAAA,6LAAO,EACL,CAAC,KAAK,MAAQ,CAAC;QACb,MAAM;QACN,iBAAiB;QACjB,WAAW;QACX,OAAO;QAEP,SAAS,CAAC,OAAS,IAAI;gBACrB;gBACA,iBAAiB,CAAC,CAAC;gBACnB,OAAO;YACT;QAEA,YAAY,CAAC,YAAc,IAAI;gBAAE;YAAU;QAE3C,UAAU,CAAC,QAAU,IAAI;gBAAE;YAAM;QAEjC,QAAQ;YACN,IAAI;gBACF,gBAAgB;gBAChB,MAAM,uKAAQ,CAAC,IAAI,CAAC,OAAO;gBAE3B,SAAS;gBACT,IAAI;oBACF,MAAM;oBACN,iBAAiB;oBACjB,OAAO;gBACT;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,YAAY;gBAC1B,IAAI;oBAAE,OAAO;gBAAgB;YAC/B;QACF;QAEA,YAAY;YACV,IAAI;gBAAE,WAAW;YAAK;YAEtB,IAAI;gBACF,iBAAiB;gBACjB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,uKAAQ,CAAC,IAAI,CAAC,UAAU;gBAE5D,IAAI,SAAS,MAAM;oBACjB,eAAe;oBACf,MAAM,EAAE,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,uKAAQ,CAC5C,IAAI,CAAC,iBACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,QAAQ,IAAI,CAAC,EAAE,EACxB,MAAM;oBAET,IAAI,OAAO;wBACT,QAAQ,KAAK,CAAC,cAAc;wBAC5B,IAAI;4BAAE,iBAAiB;4BAAO,MAAM;wBAAK;oBAC3C,OAAO;wBACL,IAAI;4BAAE,MAAM;4BAAS,iBAAiB;wBAAK;oBAC7C;gBACF,OAAO;oBACL,IAAI;wBAAE,iBAAiB;wBAAO,MAAM;oBAAK;gBAC3C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,iBAAiB;gBAC/B,IAAI;oBAAE,iBAAiB;oBAAO,MAAM;gBAAK;YAC3C,SAAU;gBACR,IAAI;oBAAE,WAAW;gBAAM;YACzB;QACF;QAEA,eAAe,CAAC;YACd,MAAM,cAAc,MAAM,IAAI;YAC9B,IAAI,aAAa;gBACf,IAAI;oBACF,MAAM;wBACJ,GAAG,WAAW;wBACd,GAAG,OAAO;oBACZ;gBACF;YACF;QACF;IACF,CAAC,GACD;IACE,MAAM;IACN,YAAY,CAAC,QAAU,CAAC;YACtB,MAAM,MAAM,IAAI;YAChB,iBAAiB,MAAM,eAAe;QACxC,CAAC;AACH","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/store/gameStore.ts"],"sourcesContent":["import { create } from 'zustand'\r\nimport { persist } from 'zustand/middleware'\r\nimport { supabase } from '@/lib/supabase'\r\n\r\ninterface UserHearts {\r\n  current_hearts: number\r\n  last_refill_at: string\r\n  ad_views_today: number\r\n  ad_reset_at: string\r\n}\r\n\r\ninterface GameState {\r\n  // 사용자 데이터\r\n  level: number\r\n  totalScore: number\r\n  currentExp: number\r\n  currentPhase: number\r\n  currentStage: number\r\n  hearts: UserHearts | null\r\n  \r\n  // 하트 타이머\r\n  heartTimer: string\r\n  \r\n  // 로딩 상태\r\n  isLoading: boolean\r\n  error: string | null\r\n  \r\n  // Actions\r\n  loadUserData: (userId: string) => Promise<void>\r\n  updateHearts: () => Promise<void>\r\n  consumeHeart: (amount?: number) => Promise<boolean>\r\n  addHeartByAd: () => Promise<boolean>\r\n  buyHeartWithPoints: () => Promise<boolean>\r\n  updateScore: (score: number) => void\r\n  updateExp: (exp: number) => void\r\n  updateLevel: (level: number) => void\r\n  setError: (error: string | null) => void\r\n}\r\n\r\nexport const useGameStore = create<GameState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      // 초기 상태\r\n      level: 1,\r\n      totalScore: 0,\r\n      currentExp: 0,\r\n      currentPhase: 1,\r\n      currentStage: 1,\r\n      hearts: null,\r\n      heartTimer: '5분00초',\r\n      isLoading: false,\r\n      error: null,\r\n\r\n      // 사용자 데이터 로드\r\n      loadUserData: async (userId: string) => {\r\n        set({ isLoading: true, error: null })\r\n        \r\n        try {\r\n          // 사용자 프로필과 하트 데이터를 함께 조회\r\n          const [profileResult, heartsResult] = await Promise.all([\r\n            supabase\r\n              .from('user_profiles')\r\n              .select('level, total_score, current_exp, current_phase, current_stage')\r\n              .eq('id', userId)\r\n              .single(),\r\n            \r\n            supabase\r\n              .from('user_hearts')\r\n              .select('*')\r\n              .eq('user_id', userId)\r\n              .single()\r\n          ])\r\n\r\n          if (profileResult.error) {\r\n            console.warn('프로필 로드 실패, 기본값 사용:', profileResult.error.message)\r\n            // 프로필이 없으면 기본값 사용 (최초 회원가입 시 500포인트 지급)\r\n            const defaultProfile = {\r\n              level: 1,\r\n              total_score: 500,\r\n              current_exp: 0,\r\n              current_phase: 1,\r\n              current_stage: 1\r\n            }\r\n            \r\n            set({\r\n              level: defaultProfile.level,\r\n              totalScore: defaultProfile.total_score,\r\n              currentExp: defaultProfile.current_exp,\r\n              currentPhase: defaultProfile.current_phase,\r\n              currentStage: defaultProfile.current_stage,\r\n              isLoading: false\r\n            })\r\n            return\r\n          }\r\n\r\n          if (heartsResult.error) {\r\n            console.warn('하트 데이터 로드 실패, 기본값 사용:', heartsResult.error.message)\r\n            // 하트 데이터가 없으면 기본값 사용\r\n            const defaultHearts = {\r\n              current_hearts: 5,\r\n              last_refill_at: new Date().toISOString(),\r\n              ad_views_today: 0,\r\n              ad_reset_at: new Date().toISOString()\r\n            }\r\n            \r\n            const heartTimer = get().calculateHeartTimer(defaultHearts.last_refill_at, defaultHearts.current_hearts)\r\n            \r\n            set({\r\n              hearts: defaultHearts,\r\n              heartTimer,\r\n              isLoading: false\r\n            })\r\n            return\r\n          }\r\n\r\n          const profile = profileResult.data\r\n          const hearts = heartsResult.data\r\n\r\n          // 하트 타이머 계산\r\n          const heartTimer = get().calculateHeartTimer(hearts.last_refill_at, hearts.current_hearts)\r\n\r\n          set({\r\n            level: profile.level || 1,\r\n            totalScore: profile.total_score || 0,\r\n            currentExp: profile.current_exp || 0,\r\n            currentPhase: profile.current_phase || 1,\r\n            currentStage: profile.current_stage || 1,\r\n            hearts: hearts,\r\n            heartTimer,\r\n            isLoading: false\r\n          })\r\n\r\n        } catch (error) {\r\n          console.error('사용자 데이터 로드 실패:', error)\r\n          set({ \r\n            error: error instanceof Error ? error.message : '데이터 로드 실패',\r\n            isLoading: false \r\n          })\r\n        }\r\n      },\r\n\r\n      // 하트 업데이트\r\n      updateHearts: async () => {\r\n        const hearts = get().hearts\r\n        if (!hearts) return\r\n\r\n        // 하트가 이미 5개면 충전할 필요 없음\r\n        if (hearts.current_hearts >= 5) {\r\n          const heartTimer = get().calculateHeartTimer(hearts.last_refill_at, hearts.current_hearts)\r\n          set({ heartTimer })\r\n          return\r\n        }\r\n\r\n        try {\r\n          const { data, error } = await supabase\r\n            .rpc('refill_heart', { p_user_id: hearts.user_id })\r\n\r\n          if (error) {\r\n            console.error('하트 업데이트 실패:', error)\r\n            return\r\n          }\r\n\r\n          if (data && data.length > 0) {\r\n            const result = data[0]\r\n            const heartTimer = get().calculateHeartTimer(result.last_refill_at, result.current_hearts)\r\n            \r\n            set({\r\n              hearts: {\r\n                ...hearts,\r\n                current_hearts: result.current_hearts,\r\n                last_refill_at: result.last_refill_at\r\n              },\r\n              heartTimer\r\n            })\r\n          }\r\n        } catch (error) {\r\n          console.error('하트 업데이트 실패:', error)\r\n        }\r\n      },\r\n\r\n      // 하트 소모\r\n      consumeHeart: async (amount = 1) => {\r\n        const hearts = get().hearts\r\n        if (!hearts) return false\r\n\r\n        try {\r\n          const { data, error } = await supabase\r\n            .rpc('consume_heart', { \r\n              p_user_id: hearts.user_id, \r\n              p_amount: amount \r\n            })\r\n\r\n          if (error) {\r\n            console.error('하트 소모 실패:', error)\r\n            return false\r\n          }\r\n\r\n          if (data && data.length > 0) {\r\n            const result = data[0]\r\n            \r\n            if (result.success) {\r\n              set({\r\n                hearts: {\r\n                  ...hearts,\r\n                  current_hearts: result.current_hearts\r\n                }\r\n              })\r\n              return true\r\n            }\r\n          }\r\n          \r\n          return false\r\n        } catch (error) {\r\n          console.error('하트 소모 실패:', error)\r\n          return false\r\n        }\r\n      },\r\n\r\n      // 광고로 하트 획득\r\n      addHeartByAd: async () => {\r\n        const hearts = get().hearts\r\n        if (!hearts) return false\r\n\r\n        try {\r\n          const { data, error } = await supabase\r\n            .rpc('add_heart_by_ad', { p_user_id: hearts.user_id })\r\n\r\n          if (error) {\r\n            console.error('광고 하트 획득 실패:', error)\r\n            return false\r\n          }\r\n\r\n          if (data && data.length > 0) {\r\n            const result = data[0]\r\n            \r\n            if (result.success) {\r\n              set({\r\n                hearts: {\r\n                  ...hearts,\r\n                  current_hearts: result.current_hearts,\r\n                  ad_views_today: result.ad_views_today\r\n                }\r\n              })\r\n              return true\r\n            }\r\n          }\r\n          \r\n          return false\r\n        } catch (error) {\r\n          console.error('광고 하트 획득 실패:', error)\r\n          return false\r\n        }\r\n      },\r\n\r\n      // 포인트로 하트 구매\r\n      buyHeartWithPoints: async () => {\r\n        const hearts = get().hearts\r\n        if (!hearts) return false\r\n\r\n        try {\r\n          const { data, error } = await supabase\r\n            .rpc('buy_heart_with_points', { \r\n              p_user_id: hearts.user_id, \r\n              p_cost: 500 \r\n            })\r\n\r\n          if (error) {\r\n            console.error('포인트 하트 구매 실패:', error)\r\n            return false\r\n          }\r\n\r\n          if (data && data.length > 0) {\r\n            const result = data[0]\r\n            \r\n            if (result.success) {\r\n              set({\r\n                hearts: {\r\n                  ...hearts,\r\n                  current_hearts: result.current_hearts\r\n                },\r\n                totalScore: result.current_points\r\n              })\r\n              return true\r\n            }\r\n          }\r\n          \r\n          return false\r\n        } catch (error) {\r\n          console.error('포인트 하트 구매 실패:', error)\r\n          return false\r\n        }\r\n      },\r\n\r\n      // 점수 업데이트\r\n      updateScore: (score: number) => {\r\n        set({ totalScore: score })\r\n      },\r\n\r\n      // 경험치 업데이트\r\n      updateExp: (exp: number) => {\r\n        set({ currentExp: exp })\r\n      },\r\n\r\n      // 레벨 업데이트\r\n      updateLevel: (level: number) => {\r\n        set({ level })\r\n      },\r\n\r\n      // 에러 설정\r\n      setError: (error: string | null) => {\r\n        set({ error })\r\n      },\r\n\r\n      // 하트 타이머 계산 헬퍼 함수\r\n      calculateHeartTimer: (lastRefillAt: string, currentHearts: number) => {\r\n        // 하트가 5개면 충전 완료\r\n        if (currentHearts >= 5) {\r\n          return '충전 완료'\r\n        }\r\n        \r\n        const now = new Date()\r\n        const lastRefill = new Date(lastRefillAt)\r\n        const diffMs = now.getTime() - lastRefill.getTime()\r\n        const diffMinutes = Math.floor(diffMs / (1000 * 60))\r\n        \r\n        // 5분마다 하트 충전\r\n        const nextRefillInMinutes = 5 - (diffMinutes % 5)\r\n        \r\n        // 다음 충전까지 남은 시간을 분:초 형식으로 표시\r\n        const minutes = Math.floor(nextRefillInMinutes)\r\n        const seconds = 60 - (Math.floor(diffMs / 1000) % 60)\r\n        \r\n        return `${minutes}분${seconds.toString().padStart(2, '0')}초`\r\n      }\r\n    }),\r\n    {\r\n      name: 'game-storage',\r\n      partialize: (state) => ({\r\n        level: state.level,\r\n        totalScore: state.totalScore,\r\n        currentExp: state.currentExp,\r\n        currentPhase: state.currentPhase,\r\n        currentStage: state.currentStage,\r\n        hearts: state.hearts\r\n      })\r\n    }\r\n  )\r\n)"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/components/StageButton.tsx"],"sourcesContent":["'use client'\r\n\r\nimport Image from \"next/image\";\r\n\r\ninterface StageButtonProps {\r\n  stageNumber: number;\r\n  isLocked: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport default function StageButton({ stageNumber, isLocked, onClick }: StageButtonProps) {\r\n  return (\r\n    <button\r\n      className={`font-medium h-[64px] w-[64px] rounded-[10px] relative ${\r\n        isLocked ? 'cursor-not-allowed' : 'cursor-pointer hover:opacity-80 transition-opacity'\r\n      }`}\r\n      style={{\r\n        background: \"linear-gradient(180deg, #50B0FF 0%, #50B0FF 50%, #008DFF 50%, #008DFF 100%)\",\r\n        border: \"2px solid #76C1FF\",\r\n        outline: \"2px solid #000000\",\r\n        boxShadow: \"0px 4px 4px 0px rgba(0, 0, 0, 0.25), inset 0px 3px 0px 0px rgba(0, 0, 0, 0.1)\",\r\n        color: \"#FFFFFF\",\r\n        fontSize: \"18px\",\r\n        fontWeight: \"400\",\r\n        WebkitTextStroke: \"1px #000000\",\r\n      }}\r\n      onClick={isLocked ? undefined : onClick}\r\n      disabled={isLocked}\r\n    >\r\n      {/* 버튼 포인트 이미지 */}\r\n      <img\r\n        src=\"/images/items/button-point-blue.png\"\r\n        alt=\"button-point-blue\"\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"3px\",\r\n          left: \"3px\",\r\n          width: \"8.47px\",\r\n          height: \"6.3px\",\r\n          pointerEvents: \"none\",\r\n        }}\r\n      />\r\n      \r\n      {/* 잠금 아이콘 또는 스테이지 번호 */}\r\n      {isLocked ? (\r\n        <Image\r\n          src=\"/images/items/icon-lock.png\"\r\n          alt=\"잠금\"\r\n          width={24}\r\n          height={24}\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            pointerEvents: \"none\",\r\n          }}\r\n        />\r\n      ) : (\r\n        <span style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          pointerEvents: \"none\",\r\n        }}>\r\n          {stageNumber}\r\n        </span>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAUe,SAAS,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAoB;IACtF,qBACE,mRAAC;QACC,WAAW,CAAC,sDAAsD,EAChE,WAAW,uBAAuB,sDAClC;QACF,OAAO;YACL,YAAY;YACZ,QAAQ;YACR,SAAS;YACT,WAAW;YACX,OAAO;YACP,UAAU;YACV,YAAY;YACZ,kBAAkB;QACpB;QACA,SAAS,WAAW,YAAY;QAChC,UAAU;;0BAGV,mRAAC;gBACC,KAAI;gBACJ,KAAI;gBACJ,OAAO;oBACL,UAAU;oBACV,KAAK;oBACL,MAAM;oBACN,OAAO;oBACP,QAAQ;oBACR,eAAe;gBACjB;;;;;;YAID,yBACC,mRAAC,6KAAK;gBACJ,KAAI;gBACJ,KAAI;gBACJ,OAAO;gBACP,QAAQ;gBACR,OAAO;oBACL,UAAU;oBACV,KAAK;oBACL,MAAM;oBACN,WAAW;oBACX,eAAe;gBACjB;;;;;qCAGF,mRAAC;gBAAK,OAAO;oBACX,UAAU;oBACV,KAAK;oBACL,MAAM;oBACN,WAAW;oBACX,eAAe;gBACjB;0BACG;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/app/game/phase1/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport Image from \"next/image\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuthStore } from \"@/store/authStore\";\r\nimport { useGameStore } from \"@/store/gameStore\";\r\nimport StageButton from \"@/components/StageButton\";\r\n\r\nexport default function Phase1Page() {\r\n  const router = useRouter();\r\n  const { user, isAuthenticated, initialize } = useAuthStore();\r\n  const { \r\n    hearts, \r\n    isLoading, \r\n    error,\r\n    currentStage,\r\n    loadUserData,\r\n    updateHearts \r\n  } = useGameStore();\r\n  \r\n  // 화면 높이 감지\r\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\r\n\r\n  // 화면 크기 감지\r\n  useEffect(() => {\r\n    const checkScreenSize = () => {\r\n      setIsSmallScreen(window.innerHeight < 700); // 700px 미만을 작은 화면으로 판단\r\n    };\r\n    \r\n    checkScreenSize();\r\n    window.addEventListener('resize', checkScreenSize);\r\n    \r\n    return () => window.removeEventListener('resize', checkScreenSize);\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트 시 인증 상태 초기화 및 데이터 로드\r\n  useEffect(() => {\r\n    const initData = async () => {\r\n      await initialize();\r\n    };\r\n    initData();\r\n  }, [initialize]);\r\n\r\n  // 사용자 데이터 로드\r\n  useEffect(() => {\r\n    if (isAuthenticated && user?.id) {\r\n      loadUserData(user.id);\r\n    }\r\n  }, [isAuthenticated, user?.id, loadUserData]);\r\n\r\n  // 하트 타이머 업데이트 (30초마다)\r\n  useEffect(() => {\r\n    if (!isAuthenticated || !user?.id || !hearts) return;\r\n\r\n    const interval = setInterval(() => {\r\n      // 하트가 5개 미만일 때만 서버 업데이트 호출\r\n      if (hearts.current_hearts < 5) {\r\n        updateHearts();\r\n      }\r\n    }, 30000); // 30초마다 (하트 충전 주기 고려)\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isAuthenticated, user?.id, hearts, updateHearts]);\r\n\r\n  // 스테이지 잠금 상태 확인\r\n  const isStageLocked = (stageNumber: number) => {\r\n    // 현재 스테이지보다 높은 스테이지는 잠금\r\n    return stageNumber > currentStage;\r\n  };\r\n\r\n  // 스테이지 클릭 핸들러\r\n  const handleStageClick = (stageNumber: number) => {\r\n    // 잠금된 스테이지는 클릭 불가\r\n    if (isStageLocked(stageNumber)) {\r\n      return;\r\n    }\r\n    \r\n    // TODO: 퀴즈 페이지로 이동\r\n    console.log(`페이즈 1 스테이지 ${stageNumber} 클릭`);\r\n  };\r\n\r\n  // 로딩 중이거나 에러가 있으면 표시\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"relative min-h-screen overflow-hidden\">\r\n        {/* 배경 이미지 */}\r\n        <div className=\"absolute inset-0 z-0\">\r\n          <Image\r\n            src=\"/images/backgrounds/background-phase1.png\"\r\n            alt=\"페이즈 1 배경\"\r\n            fill\r\n            className=\"object-cover\"\r\n            priority\r\n          />\r\n        </div>\r\n        \r\n        {/* 로딩 텍스트 */}\r\n        <div className=\"relative z-10 flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-white text-xl font-medium\">로딩 중...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"relative min-h-screen overflow-hidden\">\r\n        {/* 배경 이미지 */}\r\n        <div className=\"absolute inset-0 z-0\">\r\n          <Image\r\n            src=\"/images/backgrounds/background-phase1.png\"\r\n            alt=\"페이즈 1 배경\"\r\n            fill\r\n            className=\"object-cover\"\r\n            priority\r\n          />\r\n        </div>\r\n        \r\n        {/* 에러 텍스트 */}\r\n        <div className=\"relative z-10 flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-red-500 text-xl font-medium\">에러: {error}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"relative min-h-screen overflow-hidden flex items-center justify-center\">\r\n        <div className=\"text-white text-xl\">로그인이 필요합니다.</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative min-h-screen overflow-hidden\">\r\n      {/* 배경 이미지 */}\r\n      <div className=\"absolute inset-0 z-0\">\r\n        <Image\r\n          src=\"/images/backgrounds/background-phase1.png\"\r\n          alt=\"페이즈 1 배경\"\r\n          fill\r\n          className=\"object-cover\"\r\n          priority\r\n        />\r\n      </div>\r\n\r\n      {/* 메인 콘텐츠 */}\r\n      <div className=\"relative z-10 w-full h-screen\">\r\n        \r\n        {/* 뒤로가기 버튼 */}\r\n        <div className=\"absolute top-4 left-4 z-20\">\r\n          <button\r\n            onClick={() => router.back()}\r\n            className=\"flex items-center gap-2 text-white hover:opacity-80 transition-opacity  px-3 py-2 rounded-lg\"\r\n          >\r\n            <Image\r\n              src=\"/images/items/icon-backspace.png\"\r\n              alt=\"뒤로가기\"\r\n              width={24}\r\n              height={24}\r\n            />\r\n          </button>\r\n        </div>\r\n\r\n        {/* 스테이지 버튼들 - 화면 크기에 따른 조건부 배치 */}\r\n        <div className=\"absolute inset-0 flex flex-col justify-center items-center mb-5\">\r\n          \r\n          {isSmallScreen ? (\r\n            // 작은 화면용 배치\r\n            <>\r\n              {/* 스테이지 1 - 하단 */}\r\n              <div className=\"absolute bottom-[24px] left-1/2 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={1}\r\n                  isLocked={isStageLocked(1)}\r\n                  onClick={() => handleStageClick(1)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 2 - 스테이지 1 위 */}\r\n              <div className=\"absolute bottom-[180px] left-5/9 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={2}\r\n                  isLocked={isStageLocked(2)}\r\n                  onClick={() => handleStageClick(2)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 3 - 스테이지 2 위 */}\r\n              <div className=\"absolute bottom-[300px] left-4/10 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={3}\r\n                  isLocked={isStageLocked(3)}\r\n                  onClick={() => handleStageClick(3)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 4 - 스테이지 3 위 */}\r\n              <div className=\"absolute bottom-[400px] left-5/9 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={4}\r\n                  isLocked={isStageLocked(4)}\r\n                  onClick={() => handleStageClick(4)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 5 - 스테이지 4 위 */}\r\n              <div className=\"absolute bottom-[520px] left-1/2 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={5}\r\n                  isLocked={isStageLocked(5)}\r\n                  onClick={() => handleStageClick(5)}\r\n                />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            // 일반 화면용 배치\r\n            <>\r\n              {/* 스테이지 1 - 하단 */}\r\n              <div className=\"absolute bottom-[24px] left-1/2 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={1}\r\n                  isLocked={isStageLocked(1)}\r\n                  onClick={() => handleStageClick(1)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 2 - 스테이지 1 위 */}\r\n              <div className=\"absolute bottom-[200px] left-5/9 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={2}\r\n                  isLocked={isStageLocked(2)}\r\n                  onClick={() => handleStageClick(2)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 3 - 스테이지 2 위 */}\r\n              <div className=\"absolute bottom-[340px] left-4/10 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={3}\r\n                  isLocked={isStageLocked(3)}\r\n                  onClick={() => handleStageClick(3)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 4 - 스테이지 3 위 */}\r\n              <div className=\"absolute bottom-[440px] left-6/9 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={4}\r\n                  isLocked={isStageLocked(4)}\r\n                  onClick={() => handleStageClick(4)}\r\n                />\r\n              </div>\r\n              \r\n              {/* 스테이지 5 - 스테이지 4 위 */}\r\n              <div className=\"absolute bottom-[580px] left-1/2 transform -translate-x-1/2\">\r\n                <StageButton\r\n                  stageNumber={5}\r\n                  isLocked={isStageLocked(5)}\r\n                  onClick={() => handleStageClick(5)}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}