{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/utils/tokenManager.ts"],"sourcesContent":["import { TossTokenResponse } from '@/types/toss'\r\n\r\nexport class TokenManager {\r\n  private static readonly ACCESS_TOKEN_KEY = 'toss_access_token'\r\n  private static readonly REFRESH_TOKEN_KEY = 'toss_refresh_token'\r\n  private static readonly EXPIRES_AT_KEY = 'toss_expires_at'\r\n  private static readonly USER_KEY = 'toss_user_key'\r\n\r\n  // 토큰 저장\r\n  static saveTokens(accessToken: string, refreshToken: string, expiresIn: number, userKey?: number) {\r\n    if (typeof window === 'undefined') return\r\n    \r\n    const expiresAt = Date.now() + (expiresIn * 1000)\r\n    \r\n    localStorage.setItem(this.ACCESS_TOKEN_KEY, accessToken)\r\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, refreshToken)\r\n    localStorage.setItem(this.EXPIRES_AT_KEY, expiresAt.toString())\r\n    if (userKey) {\r\n      localStorage.setItem(this.USER_KEY, userKey.toString())\r\n    }\r\n  }\r\n\r\n  // 토큰 조회\r\n  static getAccessToken(): string | null {\r\n    if (typeof window === 'undefined') return null\r\n    return localStorage.getItem(this.ACCESS_TOKEN_KEY)\r\n  }\r\n\r\n  static getRefreshToken(): string | null {\r\n    if (typeof window === 'undefined') return null\r\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY)\r\n  }\r\n\r\n  static getUserKey(): number | null {\r\n    if (typeof window === 'undefined') return null\r\n    const userKey = localStorage.getItem(this.USER_KEY)\r\n    return userKey ? parseInt(userKey) : null\r\n  }\r\n\r\n  // 토큰 만료 확인\r\n  static isTokenExpired(): boolean {\r\n    if (typeof window === 'undefined') return true\r\n    \r\n    const expiresAt = localStorage.getItem(this.EXPIRES_AT_KEY)\r\n    if (!expiresAt) return true\r\n    \r\n    // 5분 버퍼를 두고 만료 체크 (300,000ms)\r\n    return Date.now() >= parseInt(expiresAt) - 300000\r\n  }\r\n\r\n  // 토큰 갱신\r\n  static async refreshAccessToken(): Promise<string> {\r\n    const refreshToken = this.getRefreshToken()\r\n    if (!refreshToken) {\r\n      throw new Error('리프레시 토큰이 없습니다.')\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('https://apps-in-toss-api.toss.im/api-partner/v1/apps-in-toss/user/oauth2/refresh-token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          refreshToken\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`토큰 갱신 요청 실패: ${response.status}`)\r\n      }\r\n\r\n      const data: TossTokenResponse = await response.json()\r\n      \r\n      if (data.resultType === 'FAILURE') {\r\n        throw new Error(data.failure?.errorMessage || '토큰 갱신 실패')\r\n      }\r\n\r\n      if (data.success) {\r\n        // 새 토큰 저장\r\n        this.saveTokens(\r\n          data.success.accessToken,\r\n          data.success.refreshToken,\r\n          data.success.expiresIn\r\n        )\r\n        return data.success.accessToken\r\n      }\r\n\r\n      throw new Error('토큰 갱신 응답이 올바르지 않습니다.')\r\n    } catch (error) {\r\n      console.error('토큰 갱신 실패:', error)\r\n      // 토큰 갱신 실패 시 로그아웃 처리\r\n      this.clearTokens()\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 토큰 삭제\r\n  static clearTokens() {\r\n    if (typeof window === 'undefined') return\r\n    \r\n    localStorage.removeItem(this.ACCESS_TOKEN_KEY)\r\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY)\r\n    localStorage.removeItem(this.EXPIRES_AT_KEY)\r\n    localStorage.removeItem(this.USER_KEY)\r\n  }\r\n\r\n  // 유효한 액세스 토큰 가져오기 (필요시 자동 갱신)\r\n  static async getValidAccessToken(): Promise<string | null> {\r\n    const accessToken = this.getAccessToken()\r\n    \r\n    if (!accessToken) {\r\n      return null\r\n    }\r\n\r\n    // 토큰이 만료되었으면 갱신\r\n    if (this.isTokenExpired()) {\r\n      try {\r\n        return await this.refreshAccessToken()\r\n      } catch (error) {\r\n        console.error('토큰 자동 갱신 실패:', error)\r\n        return null\r\n      }\r\n    }\r\n\r\n    return accessToken\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAEO,MAAM;IACX,OAAwB,mBAAmB,oBAAmB;IAC9D,OAAwB,oBAAoB,qBAAoB;IAChE,OAAwB,iBAAiB,kBAAiB;IAC1D,OAAwB,WAAW,gBAAe;IAElD,QAAQ;IACR,OAAO,WAAW,WAAmB,EAAE,YAAoB,EAAE,SAAiB,EAAE,OAAgB,EAAE;QAChG,wCAAmC;;;QAEnC,MAAM;IAQR;IAEA,QAAQ;IACR,OAAO,iBAAgC;QACrC,wCAAmC,OAAO;;;IAE5C;IAEA,OAAO,kBAAiC;QACtC,wCAAmC,OAAO;;;IAE5C;IAEA,OAAO,aAA4B;QACjC,wCAAmC,OAAO;;;QAC1C,MAAM;IAER;IAEA,WAAW;IACX,OAAO,iBAA0B;QAC/B,wCAAmC,OAAO;;;QAE1C,MAAM;IAKR;IAEA,QAAQ;IACR,aAAa,qBAAsC;QACjD,MAAM,eAAe,IAAI,CAAC,eAAe;QACzC,IAAI,CAAC,cAAc;YACjB,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,0FAA0F;gBACrH,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB;gBACF;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,SAAS,MAAM,EAAE;YACnD;YAEA,MAAM,OAA0B,MAAM,SAAS,IAAI;YAEnD,IAAI,KAAK,UAAU,KAAK,WAAW;gBACjC,MAAM,IAAI,MAAM,KAAK,OAAO,EAAE,gBAAgB;YAChD;YAEA,IAAI,KAAK,OAAO,EAAE;gBAChB,UAAU;gBACV,IAAI,CAAC,UAAU,CACb,KAAK,OAAO,CAAC,WAAW,EACxB,KAAK,OAAO,CAAC,YAAY,EACzB,KAAK,OAAO,CAAC,SAAS;gBAExB,OAAO,KAAK,OAAO,CAAC,WAAW;YACjC;YAEA,MAAM,IAAI,MAAM;QAClB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,aAAa;YAC3B,qBAAqB;YACrB,IAAI,CAAC,WAAW;YAChB,MAAM;QACR;IACF;IAEA,QAAQ;IACR,OAAO,cAAc;QACnB,wCAAmC;;;IAMrC;IAEA,8BAA8B;IAC9B,aAAa,sBAA8C;QACzD,MAAM,cAAc,IAAI,CAAC,cAAc;QAEvC,IAAI,CAAC,aAAa;YAChB,OAAO;QACT;QAEA,gBAAgB;QAChB,IAAI,IAAI,CAAC,cAAc,IAAI;YACzB,IAAI;gBACF,OAAO,MAAM,IAAI,CAAC,kBAAkB;YACtC,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,gBAAgB;gBAC9B,OAAO;YACT;QACF;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/types/toss.ts"],"sourcesContent":["// 토스 인증 응답 (appLogin 결과)\r\nexport interface TossAuthResponse {\r\n  authorizationCode: string\r\n  referrer: 'sandbox' | 'DEFAULT'\r\n}\r\n\r\n// 토스 토큰 응답\r\nexport interface TossTokenResponse {\r\n  resultType: 'SUCCESS' | 'FAILURE'\r\n  success?: {\r\n    tokenType: 'Bearer'\r\n    accessToken: string\r\n    refreshToken: string\r\n    expiresIn: number\r\n    scope: string\r\n  }\r\n  failure?: {\r\n    errorCode: string\r\n    errorMessage: string\r\n  }\r\n}\r\n\r\n// 토스 사용자 정보 (이름만)\r\nexport interface TossUserInfo {\r\n  resultType: 'SUCCESS' | 'FAILURE'\r\n  success?: {\r\n    userKey: number\r\n    name: string\r\n  }\r\n  failure?: {\r\n    errorCode: string\r\n    errorMessage: string\r\n  }\r\n}\r\n\r\n// 토스 에러 코드\r\nexport enum TossErrorCode {\r\n  // 인증 관련\r\n  INVALID_AUTHORIZATION_CODE = 'INVALID_AUTHORIZATION_CODE',\r\n  EXPIRED_AUTHORIZATION_CODE = 'EXPIRED_AUTHORIZATION_CODE',\r\n  INVALID_ACCESS_TOKEN = 'INVALID_ACCESS_TOKEN',\r\n  EXPIRED_ACCESS_TOKEN = 'EXPIRED_ACCESS_TOKEN',\r\n  INVALID_REFRESH_TOKEN = 'INVALID_REFRESH_TOKEN',\r\n  EXPIRED_REFRESH_TOKEN = 'EXPIRED_REFRESH_TOKEN',\r\n  \r\n  // 사용자 관련\r\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\r\n  USER_ALREADY_EXISTS = 'USER_ALREADY_EXISTS',\r\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\r\n  \r\n  // 시스템 관련\r\n  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',\r\n  NETWORK_ERROR = 'NETWORK_ERROR',\r\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\r\n}\r\n\r\n// 토스 에러\r\nexport interface TossError {\r\n  code: TossErrorCode\r\n  message: string\r\n  details?: any\r\n}\r\n\r\n// 토스 로그인 결과\r\nexport interface TossLoginResult {\r\n  auth: TossAuthResponse\r\n  token: TossTokenResponse['success']\r\n  user: TossUserInfo['success']\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AAoClB,IAAA,AAAK,uCAAA;IACV,QAAQ;;;;;;;IAQR,SAAS;;;;IAKT,SAAS;;;;WAdC","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/utils/errorHandler.ts"],"sourcesContent":["import { TossError, TossErrorCode } from '@/types/toss'\r\n\r\nexport class ErrorHandler {\r\n  static handleTossError(error: any): TossError {\r\n    // 토스 API 에러 처리\r\n    if (error?.failure) {\r\n      return {\r\n        code: this.mapTossErrorCode(error.failure.errorCode),\r\n        message: error.failure.errorMessage,\r\n        details: error.failure\r\n      }\r\n    }\r\n\r\n    // 네트워크 에러 처리\r\n    if (error instanceof TypeError && error.message.includes('fetch')) {\r\n      return {\r\n        code: TossErrorCode.NETWORK_ERROR,\r\n        message: '네트워크 연결을 확인해주세요.',\r\n        details: error\r\n      }\r\n    }\r\n\r\n    // 알 수 없는 에러\r\n    return {\r\n      code: TossErrorCode.UNKNOWN_ERROR,\r\n      message: error?.message || '알 수 없는 오류가 발생했습니다.',\r\n      details: error\r\n    }\r\n  }\r\n\r\n  private static mapTossErrorCode(tossCode: string): TossErrorCode {\r\n    const errorMap: Record<string, TossErrorCode> = {\r\n      'INVALID_AUTHORIZATION_CODE': TossErrorCode.INVALID_AUTHORIZATION_CODE,\r\n      'EXPIRED_AUTHORIZATION_CODE': TossErrorCode.EXPIRED_AUTHORIZATION_CODE,\r\n      'INVALID_ACCESS_TOKEN': TossErrorCode.INVALID_ACCESS_TOKEN,\r\n      'EXPIRED_ACCESS_TOKEN': TossErrorCode.EXPIRED_ACCESS_TOKEN,\r\n      'INVALID_REFRESH_TOKEN': TossErrorCode.INVALID_REFRESH_TOKEN,\r\n      'EXPIRED_REFRESH_TOKEN': TossErrorCode.EXPIRED_REFRESH_TOKEN,\r\n      'USER_NOT_FOUND': TossErrorCode.USER_NOT_FOUND,\r\n      'INTERNAL_SERVER_ERROR': TossErrorCode.INTERNAL_SERVER_ERROR\r\n    }\r\n\r\n    return errorMap[tossCode] || TossErrorCode.UNKNOWN_ERROR\r\n  }\r\n\r\n  static getErrorMessage(error: TossError): string {\r\n    const errorMessages: Record<TossErrorCode, string> = {\r\n      [TossErrorCode.INVALID_AUTHORIZATION_CODE]: '유효하지 않은 인가 코드입니다.',\r\n      [TossErrorCode.EXPIRED_AUTHORIZATION_CODE]: '인가 코드가 만료되었습니다. 다시 로그인해주세요.',\r\n      [TossErrorCode.INVALID_ACCESS_TOKEN]: '유효하지 않은 액세스 토큰입니다.',\r\n      [TossErrorCode.EXPIRED_ACCESS_TOKEN]: '액세스 토큰이 만료되었습니다.',\r\n      [TossErrorCode.INVALID_REFRESH_TOKEN]: '유효하지 않은 리프레시 토큰입니다.',\r\n      [TossErrorCode.EXPIRED_REFRESH_TOKEN]: '리프레시 토큰이 만료되었습니다. 다시 로그인해주세요.',\r\n      [TossErrorCode.USER_NOT_FOUND]: '사용자를 찾을 수 없습니다.',\r\n      [TossErrorCode.USER_ALREADY_EXISTS]: '이미 존재하는 사용자입니다.',\r\n      [TossErrorCode.INSUFFICIENT_PERMISSIONS]: '권한이 부족합니다.',\r\n      [TossErrorCode.INTERNAL_SERVER_ERROR]: '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',\r\n      [TossErrorCode.NETWORK_ERROR]: '네트워크 연결을 확인해주세요.',\r\n      [TossErrorCode.UNKNOWN_ERROR]: '알 수 없는 오류가 발생했습니다.'\r\n    }\r\n\r\n    return errorMessages[error.code] || error.message\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM;IACX,OAAO,gBAAgB,KAAU,EAAa;QAC5C,eAAe;QACf,IAAI,OAAO,SAAS;YAClB,OAAO;gBACL,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,OAAO,CAAC,SAAS;gBACnD,SAAS,MAAM,OAAO,CAAC,YAAY;gBACnC,SAAS,MAAM,OAAO;YACxB;QACF;QAEA,aAAa;QACb,IAAI,iBAAiB,aAAa,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU;YACjE,OAAO;gBACL,MAAM,0KAAa,CAAC,aAAa;gBACjC,SAAS;gBACT,SAAS;YACX;QACF;QAEA,YAAY;QACZ,OAAO;YACL,MAAM,0KAAa,CAAC,aAAa;YACjC,SAAS,OAAO,WAAW;YAC3B,SAAS;QACX;IACF;IAEA,OAAe,iBAAiB,QAAgB,EAAiB;QAC/D,MAAM,WAA0C;YAC9C,8BAA8B,0KAAa,CAAC,0BAA0B;YACtE,8BAA8B,0KAAa,CAAC,0BAA0B;YACtE,wBAAwB,0KAAa,CAAC,oBAAoB;YAC1D,wBAAwB,0KAAa,CAAC,oBAAoB;YAC1D,yBAAyB,0KAAa,CAAC,qBAAqB;YAC5D,yBAAyB,0KAAa,CAAC,qBAAqB;YAC5D,kBAAkB,0KAAa,CAAC,cAAc;YAC9C,yBAAyB,0KAAa,CAAC,qBAAqB;QAC9D;QAEA,OAAO,QAAQ,CAAC,SAAS,IAAI,0KAAa,CAAC,aAAa;IAC1D;IAEA,OAAO,gBAAgB,KAAgB,EAAU;QAC/C,MAAM,gBAA+C;YACnD,CAAC,0KAAa,CAAC,0BAA0B,CAAC,EAAE;YAC5C,CAAC,0KAAa,CAAC,0BAA0B,CAAC,EAAE;YAC5C,CAAC,0KAAa,CAAC,oBAAoB,CAAC,EAAE;YACtC,CAAC,0KAAa,CAAC,oBAAoB,CAAC,EAAE;YACtC,CAAC,0KAAa,CAAC,qBAAqB,CAAC,EAAE;YACvC,CAAC,0KAAa,CAAC,qBAAqB,CAAC,EAAE;YACvC,CAAC,0KAAa,CAAC,cAAc,CAAC,EAAE;YAChC,CAAC,0KAAa,CAAC,mBAAmB,CAAC,EAAE;YACrC,CAAC,0KAAa,CAAC,wBAAwB,CAAC,EAAE;YAC1C,CAAC,0KAAa,CAAC,qBAAqB,CAAC,EAAE;YACvC,CAAC,0KAAa,CAAC,aAAa,CAAC,EAAE;YAC/B,CAAC,0KAAa,CAAC,aAAa,CAAC,EAAE;QACjC;QAEA,OAAO,aAAa,CAAC,MAAM,IAAI,CAAC,IAAI,MAAM,OAAO;IACnD;AACF","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/hooks/useTossAuth.ts"],"sourcesContent":["'use client'\r\n\r\nimport { useState } from 'react'\r\nimport { TossAuthResponse, TossTokenResponse, TossUserInfo, TossLoginResult } from '@/types/toss'\r\nimport { TokenManager } from '@/utils/tokenManager'\r\nimport { ErrorHandler } from '@/utils/errorHandler'\r\n\r\n// 앱인토스 SDK 타입 선언\r\ndeclare global {\r\n  function appLogin(): Promise<TossAuthResponse>\r\n}\r\n\r\nexport const useTossAuth = () => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  // 1. 토스 로그인 (인가 코드 받기)\r\n  const tossLogin = async (): Promise<TossAuthResponse> => {\r\n    try {\r\n      if (typeof appLogin === 'undefined') {\r\n        throw new Error('앱인토스 환경에서만 사용할 수 있습니다.')\r\n      }\r\n\r\n      const result = await appLogin()\r\n      \r\n      if (!result.authorizationCode) {\r\n        throw new Error('인가 코드를 받을 수 없습니다.')\r\n      }\r\n      \r\n      return result\r\n    } catch (error) {\r\n      console.error('토스 로그인 실패:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 2. 액세스 토큰 발급\r\n  const getAccessToken = async (authorizationCode: string, referrer: string): Promise<TossTokenResponse> => {\r\n    try {\r\n      const response = await fetch('https://apps-in-toss-api.toss.im/api-partner/v1/apps-in-toss/user/oauth2/generate-token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          authorizationCode,\r\n          referrer\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`토큰 요청 실패: ${response.status}`)\r\n      }\r\n\r\n      return await response.json()\r\n    } catch (error) {\r\n      console.error('액세스 토큰 발급 실패:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 3. 사용자 정보 조회\r\n  const getUserInfo = async (accessToken: string): Promise<TossUserInfo> => {\r\n    try {\r\n      const response = await fetch('https://apps-in-toss-api.toss.im/api-partner/v1/apps-in-toss/user', {\r\n        headers: {\r\n          'Authorization': `Bearer ${accessToken}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`사용자 정보 요청 실패: ${response.status}`)\r\n      }\r\n\r\n      return await response.json()\r\n    } catch (error) {\r\n      console.error('사용자 정보 조회 실패:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 통합 로그인 함수\r\n  const login = async (): Promise<TossLoginResult> => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // 1. 토스 로그인 (인가 코드 받기)\r\n      const authResult = await tossLogin()\r\n      \r\n      // 2. 액세스 토큰 발급\r\n      const tokenResult = await getAccessToken(\r\n        authResult.authorizationCode,\r\n        authResult.referrer\r\n      )\r\n      \r\n      if (tokenResult.resultType === 'FAILURE') {\r\n        const tossError = ErrorHandler.handleTossError(tokenResult)\r\n        throw new Error(ErrorHandler.getErrorMessage(tossError))\r\n      }\r\n\r\n      if (!tokenResult.success) {\r\n        throw new Error('토큰 발급에 실패했습니다.')\r\n      }\r\n\r\n      // 3. 사용자 정보 조회\r\n      const userResult = await getUserInfo(tokenResult.success.accessToken)\r\n      \r\n      if (userResult.resultType === 'FAILURE') {\r\n        const tossError = ErrorHandler.handleTossError(userResult)\r\n        throw new Error(ErrorHandler.getErrorMessage(tossError))\r\n      }\r\n\r\n      if (!userResult.success) {\r\n        throw new Error('사용자 정보 조회에 실패했습니다.')\r\n      }\r\n\r\n      // 4. 토큰 저장\r\n      TokenManager.saveTokens(\r\n        tokenResult.success.accessToken,\r\n        tokenResult.success.refreshToken,\r\n        tokenResult.success.expiresIn,\r\n        userResult.success.userKey\r\n      )\r\n\r\n      return {\r\n        auth: authResult,\r\n        token: tokenResult.success,\r\n        user: userResult.success\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : '알 수 없는 오류'\r\n      setError(errorMessage)\r\n      throw error\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // 로그아웃\r\n  const logout = () => {\r\n    TokenManager.clearTokens()\r\n    setError(null)\r\n  }\r\n\r\n  return {\r\n    login,\r\n    logout,\r\n    isLoading,\r\n    error\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false\r\n  }\r\n})\r\n\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,4OAAY,EAAC,aAAa,iBAAiB;IACjE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;QAChB,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/services/tossAuthService.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase'\r\nimport { UserProfile, UserProfileInsert } from '@/types/database'\r\nimport { TossLoginResult } from '@/types/toss'\r\n\r\nexport class TossAuthService {\r\n  // 토스 정보로 Supabase 사용자 생성/로그인\r\n  static async createOrUpdateUser(tossData: TossLoginResult) {\r\n    const { user, token, auth } = tossData\r\n    \r\n    // 토스 userKey를 이메일로 변환 (고유 식별자)\r\n    const email = `${user.userKey}@toss.health-hero.app`\r\n    const password = `toss_${user.userKey}_${Date.now()}`\r\n\r\n    try {\r\n      // 1. 기존 사용자 확인\r\n      const existingProfile = await this.findUserByTossKey(user.userKey)\r\n      \r\n      let userId: string\r\n\r\n      if (existingProfile) {\r\n        // 기존 사용자 - 토스 정보로 Supabase 로그인\r\n        const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({\r\n          email: existingProfile.email || email,\r\n          password: `toss_${user.userKey}_permanent`\r\n        })\r\n\r\n        if (signInError) {\r\n          // 비밀번호가 틀린 경우, 사용자를 찾아서 세션 생성\r\n          console.log('기존 사용자 재로그인 시도...')\r\n          throw signInError\r\n        }\r\n\r\n        userId = signInData.user.id\r\n      } else {\r\n        // 신규 사용자 - Supabase 계정 생성\r\n        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({\r\n          email,\r\n          password: `toss_${user.userKey}_permanent`, // 고정된 비밀번호 사용\r\n          options: {\r\n            data: {\r\n              toss_user_key: user.userKey,\r\n              name: user.name\r\n            }\r\n          }\r\n        })\r\n\r\n        if (signUpError) {\r\n          throw signUpError\r\n        }\r\n\r\n        if (!signUpData.user) {\r\n          throw new Error('사용자 생성에 실패했습니다.')\r\n        }\r\n\r\n        userId = signUpData.user.id\r\n      }\r\n\r\n      // 2. 사용자 프로필 업데이트/생성\r\n      const tokenExpiresAt = new Date(Date.now() + token.expiresIn * 1000).toISOString()\r\n      \r\n      const profileData: UserProfileInsert = {\r\n        id: userId,\r\n        email,\r\n        name: user.name,\r\n        toss_user_key: user.userKey,\r\n        toss_access_token: token.accessToken,\r\n        toss_refresh_token: token.refreshToken,\r\n        toss_token_expires_at: tokenExpiresAt,\r\n        toss_referrer: auth.referrer,\r\n        level: existingProfile?.level || 1,\r\n        current_exp: existingProfile?.current_exp || 0,\r\n        total_score: existingProfile?.total_score || 0,\r\n        current_streak: existingProfile?.current_streak || 0,\r\n        current_stage: existingProfile?.current_stage || 1,\r\n        current_phase: existingProfile?.current_phase || 1\r\n      }\r\n\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('user_profiles')\r\n        .upsert(profileData, {\r\n          onConflict: 'id'\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (profileError) {\r\n        console.error('프로필 저장 실패:', profileError)\r\n        throw profileError\r\n      }\r\n\r\n      // 3. 로그인 기록 저장\r\n      await supabase\r\n        .from('toss_login_logs')\r\n        .insert({\r\n          user_id: userId,\r\n          toss_user_key: user.userKey,\r\n          referrer: auth.referrer,\r\n          user_agent: typeof navigator !== 'undefined' ? navigator.userAgent : null\r\n        })\r\n\r\n      return {\r\n        userId,\r\n        profile\r\n      }\r\n    } catch (error) {\r\n      console.error('Supabase 사용자 생성/업데이트 실패:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 토스 userKey로 기존 사용자 찾기\r\n  static async findUserByTossKey(tossUserKey: number): Promise<UserProfile | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_profiles')\r\n        .select('*')\r\n        .eq('toss_user_key', tossUserKey)\r\n        .single()\r\n\r\n      if (error) {\r\n        if (error.code === 'PGRST116') {\r\n          // 사용자 없음\r\n          return null\r\n        }\r\n        throw error\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('사용자 조회 실패:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 현재 로그인된 사용자 프로필 가져오기\r\n  static async getCurrentUserProfile(): Promise<UserProfile | null> {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      \r\n      if (!user) {\r\n        return null\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('user_profiles')\r\n        .select('*')\r\n        .eq('id', user.id)\r\n        .single()\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('현재 사용자 프로필 조회 실패:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 사용자 프로필 업데이트\r\n  static async updateUserProfile(userId: string, updates: Partial<UserProfile>) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_profiles')\r\n        .update(updates)\r\n        .eq('id', userId)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('프로필 업데이트 실패:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/store/authStore.ts"],"sourcesContent":["import { create } from 'zustand'\r\nimport { persist } from 'zustand/middleware'\r\nimport { UserProfile } from '@/types/database'\r\nimport { supabase } from '@/lib/supabase'\r\n\r\ninterface AuthState {\r\n  user: UserProfile | null\r\n  isAuthenticated: boolean\r\n  isLoading: boolean\r\n  error: string | null\r\n  \r\n  // Actions\r\n  setUser: (user: UserProfile | null) => void\r\n  setLoading: (isLoading: boolean) => void\r\n  setError: (error: string | null) => void\r\n  logout: () => Promise<void>\r\n  initialize: () => Promise<void>\r\n  updateProfile: (updates: Partial<UserProfile>) => void\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      error: null,\r\n\r\n      setUser: (user) => set({ \r\n        user, \r\n        isAuthenticated: !!user,\r\n        error: null \r\n      }),\r\n\r\n      setLoading: (isLoading) => set({ isLoading }),\r\n\r\n      setError: (error) => set({ error }),\r\n\r\n      logout: async () => {\r\n        try {\r\n          // Supabase 로그아웃\r\n          await supabase.auth.signOut()\r\n          \r\n          // 상태 초기화\r\n          set({\r\n            user: null,\r\n            isAuthenticated: false,\r\n            error: null\r\n          })\r\n        } catch (error) {\r\n          console.error('로그아웃 실패:', error)\r\n          set({ error: '로그아웃에 실패했습니다.' })\r\n        }\r\n      },\r\n\r\n      initialize: async () => {\r\n        set({ isLoading: true })\r\n        \r\n        try {\r\n          // Supabase 세션 확인\r\n          const { data: { session } } = await supabase.auth.getSession()\r\n          \r\n          if (session?.user) {\r\n            // 사용자 프로필 가져오기\r\n            const { data: profile, error } = await supabase\r\n              .from('user_profiles')\r\n              .select('*')\r\n              .eq('id', session.user.id)\r\n              .single()\r\n\r\n            if (error) {\r\n              console.error('프로필 로드 실패:', error)\r\n              set({ isAuthenticated: false, user: null })\r\n            } else {\r\n              set({ user: profile, isAuthenticated: true })\r\n            }\r\n          } else {\r\n            set({ isAuthenticated: false, user: null })\r\n          }\r\n        } catch (error) {\r\n          console.error('인증 상태 초기화 실패:', error)\r\n          set({ isAuthenticated: false, user: null })\r\n        } finally {\r\n          set({ isLoading: false })\r\n        }\r\n      },\r\n\r\n      updateProfile: (updates) => {\r\n        const currentUser = get().user\r\n        if (currentUser) {\r\n          set({\r\n            user: {\r\n              ...currentUser,\r\n              ...updates\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      partialize: (state) => ({\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated\r\n      })\r\n    }\r\n  )\r\n)\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;;;;AAiBO,MAAM,eAAe,IAAA,uLAAM,IAChC,IAAA,6LAAO,EACL,CAAC,KAAK,MAAQ,CAAC;QACb,MAAM;QACN,iBAAiB;QACjB,WAAW;QACX,OAAO;QAEP,SAAS,CAAC,OAAS,IAAI;gBACrB;gBACA,iBAAiB,CAAC,CAAC;gBACnB,OAAO;YACT;QAEA,YAAY,CAAC,YAAc,IAAI;gBAAE;YAAU;QAE3C,UAAU,CAAC,QAAU,IAAI;gBAAE;YAAM;QAEjC,QAAQ;YACN,IAAI;gBACF,gBAAgB;gBAChB,MAAM,uKAAQ,CAAC,IAAI,CAAC,OAAO;gBAE3B,SAAS;gBACT,IAAI;oBACF,MAAM;oBACN,iBAAiB;oBACjB,OAAO;gBACT;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,YAAY;gBAC1B,IAAI;oBAAE,OAAO;gBAAgB;YAC/B;QACF;QAEA,YAAY;YACV,IAAI;gBAAE,WAAW;YAAK;YAEtB,IAAI;gBACF,iBAAiB;gBACjB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,uKAAQ,CAAC,IAAI,CAAC,UAAU;gBAE5D,IAAI,SAAS,MAAM;oBACjB,eAAe;oBACf,MAAM,EAAE,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,uKAAQ,CAC5C,IAAI,CAAC,iBACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,QAAQ,IAAI,CAAC,EAAE,EACxB,MAAM;oBAET,IAAI,OAAO;wBACT,QAAQ,KAAK,CAAC,cAAc;wBAC5B,IAAI;4BAAE,iBAAiB;4BAAO,MAAM;wBAAK;oBAC3C,OAAO;wBACL,IAAI;4BAAE,MAAM;4BAAS,iBAAiB;wBAAK;oBAC7C;gBACF,OAAO;oBACL,IAAI;wBAAE,iBAAiB;wBAAO,MAAM;oBAAK;gBAC3C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,iBAAiB;gBAC/B,IAAI;oBAAE,iBAAiB;oBAAO,MAAM;gBAAK;YAC3C,SAAU;gBACR,IAAI;oBAAE,WAAW;gBAAM;YACzB;QACF;QAEA,eAAe,CAAC;YACd,MAAM,cAAc,MAAM,IAAI;YAC9B,IAAI,aAAa;gBACf,IAAI;oBACF,MAAM;wBACJ,GAAG,WAAW;wBACd,GAAG,OAAO;oBACZ;gBACF;YACF;QACF;IACF,CAAC,GACD;IACE,MAAM;IACN,YAAY,CAAC,QAAU,CAAC;YACtB,MAAM,MAAM,IAAI;YAChB,iBAAiB,MAAM,eAAe;QACxC,CAAC;AACH","debugId":null}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dhwan/Desktop/work/health-hero/src/components/TossLoginButton.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useState } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { useTossAuth } from '@/hooks/useTossAuth'\r\nimport { TossAuthService } from '@/services/tossAuthService'\r\nimport { useAuthStore } from '@/store/authStore'\r\n\r\nexport default function TossLoginButton() {\r\n  const router = useRouter()\r\n  const { login, isLoading: tossLoading, error: tossError } = useTossAuth()\r\n  const { setUser, setLoading, setError } = useAuthStore()\r\n  const [localError, setLocalError] = useState<string | null>(null)\r\n\r\n  const handleLogin = async () => {\r\n    setLocalError(null)\r\n    setError(null)\r\n    setLoading(true)\r\n\r\n    try {\r\n      // 1. 토스 로그인\r\n      const tossResult = await login()\r\n      console.log('토스 로그인 성공:', tossResult)\r\n\r\n      // 2. Supabase 연동\r\n      const supabaseResult = await TossAuthService.createOrUpdateUser(tossResult)\r\n      console.log('Supabase 연동 성공:', supabaseResult)\r\n\r\n      // 3. 사용자 정보 저장\r\n      if (supabaseResult.profile) {\r\n        setUser(supabaseResult.profile)\r\n      }\r\n\r\n      // 4. 게임 페이지로 이동\r\n      router.push('/game')\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : '로그인에 실패했습니다.'\r\n      console.error('로그인 실패:', error)\r\n      setLocalError(errorMessage)\r\n      setError(errorMessage)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const displayError = tossError || localError\r\n\r\n  return (\r\n    <div className=\"w-full space-y-4\">\r\n      <button\r\n        onClick={handleLogin}\r\n        disabled={tossLoading}\r\n        className=\"w-full bg-[#3182F6] hover:bg-[#2C5FCC] text-white font-bold py-4 px-8 rounded-2xl text-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\r\n      >\r\n        {tossLoading ? (\r\n          <span className=\"flex items-center justify-center\">\r\n            <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n            </svg>\r\n            로그인 중...\r\n          </span>\r\n        ) : (\r\n          '토스로 시작하기'\r\n        )}\r\n      </button>\r\n\r\n      {displayError && (\r\n        <div className=\"bg-red-500/10 border border-red-500/50 rounded-lg p-3\">\r\n          <p className=\"text-red-500 text-sm text-center\">{displayError}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 개발 환경 안내 */}\r\n      {typeof window !== 'undefined' && typeof appLogin === 'undefined' && (\r\n        <div className=\"bg-yellow-500/10 border border-yellow-500/50 rounded-lg p-3\">\r\n          <p className=\"text-yellow-600 text-xs text-center\">\r\n            💡 토스 로그인은 앱인토스 환경에서만 사용할 수 있습니다.<br />\r\n            샌드박스 앱 또는 토스앱에서 테스트해주세요.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AANA;;;;;;;AAQe,SAAS;IACtB,MAAM,SAAS,IAAA,oLAAS;IACxB,MAAM,EAAE,KAAK,EAAE,WAAW,WAAW,EAAE,OAAO,SAAS,EAAE,GAAG,IAAA,+KAAW;IACvE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAA,8KAAY;IACtD,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,sPAAQ,EAAgB;IAE5D,MAAM,cAAc;QAClB,cAAc;QACd,SAAS;QACT,WAAW;QAEX,IAAI;YACF,YAAY;YACZ,MAAM,aAAa,MAAM;YACzB,QAAQ,GAAG,CAAC,cAAc;YAE1B,iBAAiB;YACjB,MAAM,iBAAiB,MAAM,0LAAe,CAAC,kBAAkB,CAAC;YAChE,QAAQ,GAAG,CAAC,mBAAmB;YAE/B,eAAe;YACf,IAAI,eAAe,OAAO,EAAE;gBAC1B,QAAQ,eAAe,OAAO;YAChC;YAEA,gBAAgB;YAChB,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,OAAO;YACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAC9D,QAAQ,KAAK,CAAC,WAAW;YACzB,cAAc;YACd,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,eAAe,aAAa;IAElC,qBACE,mRAAC;QAAI,WAAU;;0BACb,mRAAC;gBACC,SAAS;gBACT,UAAU;gBACV,WAAU;0BAET,4BACC,mRAAC;oBAAK,WAAU;;sCACd,mRAAC;4BAAI,WAAU;4BAA6C,OAAM;4BAA6B,MAAK;4BAAO,SAAQ;;8CACjH,mRAAC;oCAAO,WAAU;oCAAa,IAAG;oCAAK,IAAG;oCAAK,GAAE;oCAAK,QAAO;oCAAe,aAAY;;;;;;8CACxF,mRAAC;oCAAK,WAAU;oCAAa,MAAK;oCAAe,GAAE;;;;;;;;;;;;wBAC/C;;;;;;2BAIR;;;;;;YAIH,8BACC,mRAAC;gBAAI,WAAU;0BACb,cAAA,mRAAC;oBAAE,WAAU;8BAAoC;;;;;;;;;;;YAKpD,gBAAkB,eAAe,OAAO,aAAa,6BACpD,mRAAC;gBAAI,WAAU;0BACb,cAAA,mRAAC;oBAAE,WAAU;;wBAAsC;sCAChB,mRAAC;;;;;wBAAK;;;;;;;;;;;;;;;;;;AAOnD","debugId":null}}]
}